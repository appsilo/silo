#!/usr/bin/env python3

import importlib
import pkgutil
import argparse
from Hako.Console import Commands

# To Do:
# Use argparse to handle parsed method signatures
# Extract loader stuff to console kernel file and clean up this one
# Add Command base class that allows you to work with args and options
# Add aliasing to command option signatures
# Pretty printing / console print colors
# Add support for app-level commands
# Write comments / look into python api docs


def load_commands(commands):
    loaded = {}
    packages = pkgutil.walk_packages(commands.__path__, commands.__name__ + '.')
    for (importer, modname, ispkg) in packages:
        if not ispkg:
            module = importlib.import_module(modname)
            instance = getattr(module, modname.split('.')[-1])
            cmd = instance()
            loaded[cmd.signature] = {
                'module': instance,
                'signature': cmd.signature,
                'description': 'example description'
            }
    return loaded


cmds = load_commands(Commands)

parser = argparse.ArgumentParser(description='Zen CLI')
parser.add_argument(
    'command', help='Name of the command you would like to run.')
args, unknown = parser.parse_known_args()
# print(cmds)
# print(args.command)

try:
    cmd = cmds[args.command]
    # Todo: use argparse to add command-specific arguments and options here
    cmd['module']().handle()
except KeyError as e:
    print('Command "%s" not found, is it registered?' % (args.command))
    # raise e ?
